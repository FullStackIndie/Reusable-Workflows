name: Setup, Build, & Publish to DockerHub .Net Project as Artifact with Aws Code Artifact as Nuget Package Manager

on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      project-name:
        description: Project name - If project path is not specified Project Name will be used with .Net default folder naming convention
        type: string
        required: true
      image-name:
        description: Docker Image name
        type: string
        required: true
      cache-key:
        description: Cache key for uploading build artifacts
        type: string
        required: true

  workflow_dispatch:
 

        
       
jobs:
  build-test-publish:
    uses: FullStackIndie/Reusable-Workflows/.github/workflows/setup_dotnet.yml@main
    with:
      project-name: ${{ vars.PROJECT_NAME }}
      cache-key: ${{ vars.PROJECT_NAME }}
      image-name: ${{ vars.IMAGE_NAME }}
    secrets: inherit

  download-build-docker-image:
    needs: build-test-publish
    runs-on: ubuntu-latest
    

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ vars.PROJECT_NAME }}
          path: ./

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name:  Load Docker compressed Docker Image tar.gz
        run: |
          docker load < docker-image.tar.gz

      - name: Push to DockerHub
        run: docker push murphymurph21/${{ vars.IMAGE_NAME }}:latest

      - name: SSH into Dev Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
             docker pull murphymurph21/${{ vars.IMAGE_NAME }}:latest
             cd ${{ vars.DOCKER_COMPOSE_DIR }}
             export DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }}
             docker compose -f ${{ vars.DOCKER_COMPOSE_FILE }} down
             doppler run  --mount docker-compose.yml --mount-template ${{ vars.DOCKER_COMPOSE_FILE }}  --command 'doppler run -- docker-compose up -d'
             exit

        # delete-artifact
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ vars.PROJECT_NAME }}
          failOnError: false
 
        
        
        
        
