name: >-
  Setup, Build, & Publish to DockerHub .Net Project as Artifact with Aws Code
  Artifact as Nuget Package Manager
  
'on':
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      image-name:
        description: Docker Image name
        type: string
        required: true
      docker-compose-file:
        description: Docker Compose filename
        type: string
        required: true
      docker-compose-dir:
        description: Docker Compose directory
        type: string
        required: true
      cache-key:
        description: Cache key for uploading build artifacts
        type: string
        required: true
    secrets:
      SERVER_SSH_HOST:
        description: Server IP to deploy on
        required: true
      SERVER_SSH_USERNAME:
        description: Server user
        required: true
      SERVER_SSH_KEY:
        description: Server ssh key
        required: true
      SERVER_SSH_PASSPHRASE:
        description: Server ssh key passphrase
        required: true
      SERVER_SSH_PORT:
        description: Server port to ssh into
        required: true
      DOPPLER_TOKEN:
        description: Doppler token for setting up secrets
        required: true
 

jobs:
  download-build-docker-image:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.cache-key }}
          path: ./
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Load Docker compressed Docker Image tar.gz
        run: |
          docker load < docker-image.tar.gz
          
      - name: Push to DockerHub
        run: |
          docker push murphymurph21/${{ inputs.image-name }}:latest
          
      - name: SSH into Dev Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            docker pull ${{ inputs.docker-repo-name }}/${{ inputs.image-name }}:latest
            cd ${{ inputs.docker-compose-dir }}
            export DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }}
            docker compose -f ${{ inputs.docker-compose-file }} down
            doppler run --mount docker-compose.yml --mount-template ${{ inputs.docker-compose-file }} --command 'doppler run -- docker compose up -d'
            exit
            
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ inputs.cache-key }}
          failOnError: false
