#  Download Docker Image from Artifact, Publish to DockerHub, SSH into Production Server,
#  Pull the latest Docker Image, Start with Doppler/Docker-Compose so Config/Secrets are injected, Delete Artifact

name: >-
  Publish to DockerHub, Deploy to Production Server

"on":
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      image-name:
        description: Docker Image name
        type: string
        required: true
      docker-compose-file:
        description: Docker Compose filename
        type: string
        required: true
      docker-compose-dir:
        description: Docker Compose directory
        type: string
        required: true
      cache-key:
        description: Cache key for uploading build artifacts
        type: string
        required: true
    secrets:
      SERVER_SSH_HOST:
        description: Server IP to deploy on
        required: true
      SERVER_SSH_USERNAME:
        description: Server user
        required: true
      SERVER_SSH_KEY:
        description: Server ssh key
        required: true
      SERVER_SSH_PASSPHRASE:
        description: Server ssh key passphrase
        required: true
      SERVER_SSH_PORT:
        description: Server port to ssh into
        required: true
      DOPPLER_TOKEN:
        description: Doppler token for setting up secrets
        required: true
      DOCKER_HUB_USERNAME:
        description: Docker Username
        required: true
      DOCKER_HUB_ACCESS_TOKEN:
        description: Docker Acces token to access DockerHub Registry
        required: true
      OTEL_ENDPOINT:
        description: Otel Endpoint Url for sending Telemetry
        required: false
      DB_CONNECTION_STRING:
        description: DB connection string
        required: false

  workflow_dispatch:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      image-name:
        description: Docker Image name
        type: string
        required: true
      docker-compose-file:
        description: Docker Compose filename
        type: string
        required: true
      docker-compose-dir:
        description: Docker Compose directory
        type: string
        required: true
      cache-key:
        description: Cache key for uploading build artifacts
        type: string
        required: true

jobs:
  push-docker-image:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.cache-key }}
          path: ./

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Load Docker compressed Docker Image tar.gz
        run: |
          docker load < docker-image.tar.gz

      - name: Push to DockerHub
        run: |
          docker push murphymurph21/${{ inputs.image-name }}:latest

  deploy-docker-image:
    needs: push-docker-image
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: SSH into Dev Server
        env:
          OTEL_ENDPOINT: ${{ secrets.OTEL_ENDPOINT }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ inputs.image-name }}:latest
            cd ${{ inputs.docker-compose-dir }}
            export DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }}
            echo 'OTEL_ENDPOINT=$OTEL_ENDPOINT' > env.prod
            echo 'DB_CONNECTION_STRING={{ secrets.DB_CONNECTION_STRING }}' > env.prod
            echo 'DOPPLER_TOKEN={{ doppler_token_blog }}' >> env.prod
            docker compose -f ${{ inputs.docker-compose-file }} down
            doppler run --mount docker-compose.yml --mount-template ${{ inputs.docker-compose-file }} --command 'doppler run -- docker compose up -d'
            rm env.prod
            exit

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ inputs.cache-key }}
          failOnError: false
