name: >-
  Publish static Website into Production Server
  that uses S3 and CloudFront
  
on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      folder_path:
        description: Folder to create website in
        type: string
        required: true  
      owner_name:
        description: NAme of owner or organization
        type: string
        required: true 
      repo_name:
        description: Name of repo
        type: string
        required: true
      source_folder:
        description: Source Directory containing files to upload
        type: string
        default: "./"
      dest_folder:
        description: Source Directory containing files to upload
        type: string
        default: "/"
        
    secrets:
      SERVER_SSH_HOST:
        description: Server IP to deploy on
        required: true
      SERVER_SSH_USERNAME:
        description: Server user
        required: true
      SERVER_SSH_KEY:
        description: Server ssh key
        required: true
      SERVER_SSH_PORT:
        description: Server port to ssh into
        required: true
      AWS_ACCESS_KEY_ID: 
        description: Server port to ssh into
        required: true
      AWS_SECRET_ACCESS_KEY: 
        description: Server port to ssh into
        required: true
      AWS_S3_BUCKET:
        description: Server port to ssh into
        required: true
      CLOUDFRONT_DITRIBUTION_ID:
        description: Server port to ssh into
        required: true
      AWS_REGION: 
        description: Server port to ssh into
        required: true
 

jobs:
  cp-files-to-s3-invalidate-cloudfront:
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout Repo to Upload files
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      uses: actions/checkout@v3

    - name: Sync files to Aws S3 and Invalidate CloudFront Cache
      uses: kersvers/s3-sync-with-cloudfront-invalidation@v1.0.0
      with:
        args: --follow-symlinks --delete --cache-control 'public,max-age=31536000' --exclude '.git/*' --exclude '.vscode/*' --exclude '*.html' --exclude '*.gitignore' --exclude '.github/*' --exclude '*.txt' --exclude 'License/*'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DITRIBUTION_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}  
        SOURCE_DIR: ${{ inputs.source_folder }}
        DEST_DIR: ${{ inputs.dest_folder }}

  rsync-updates-to-server:
    needs: cp-files-to-s3-invalidate-cloudfront
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    
    - name: Deply with rsync 
      uses: burnett01/rsync-deployments@5.2.1
      env: 
        DEPLOY_FOLDER: ${{ inputs.folder_path }}/${{ inputs.repo_name }}
      with:
        # use --mkpath if using Ubuntu 22.04 - --mkpath not supported in rsync 3.1.3 Ubuntu 20.04 GitHub Action Runner
        switches: -avzr --delete-excluded --include='*.html'  --include='License' --exclude='*'
          --rsync-path="mkdir -p $DEPLOY_FOLDER && rsync" 
        path: ./
        remote_path: $DEPLOY_FOLDER
        remote_host: ${{ secrets.SERVER_SSH_HOST }}
        remote_user: ${{ secrets.SERVER_SSH_USERNAME }}
        remote_port: ${{ secrets.SERVER_SSH_PORT }}
        remote_key: ${{ secrets.SERVER_SSH_KEY }}

  ssh-deploy-website:
    needs: rsync-updates-to-server
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: SSH into Dev Server
        uses: appleboy/ssh-action@v0.1.7
        env: 
          DEPLOY_FOLDER: ${{ inputs.folder_path }}/${{ inputs.repo_name }}
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          envs: DEPLOY_FOLDER
          script: |
            chown -R www-data:www-data $DEPLOY_FOLDER
            systemctl reload nginx
            exit
            
