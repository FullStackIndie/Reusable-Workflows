name: Setup, Build, & Publish to DockerHub .Net Project as Artifact with Aws Code Artifact as Nuget Package Manager

on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
      project-name:
        description: Work Directory begins at /home/runner/work/ - Uses Project name with .Net default folder naming convention if not specified
        type: string
        default: "none"
      context-path-values:
        description: Comma seperated string of Context Names to migrate to the database "contex-1,context-2"
        type: string
      environment:
        description: EF Core environment (Development, Production)
        type: string
        default: Production
    secrets:
      DB_CONNECTION_STRING:
        description: Postgres DB Connection String
        required: true
      DIGITAL_OCEAN_DATABASE_CLUSTER_ID:
        description: DB Cluster Id for Digital Ocean
        required: true
      DIGITAL_OCEAN_FIREWALL_API_TOKEN:
        description: Digital Ocean API Token
        required: true
      AWS_ACCESS_KEY_ID:
        description: Aws Access Key Id
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: Aws Secret Access Key
        required: true
      AWS_REGION:
        description: Aws Region
        required: true

jobs:
  sanitize-context-paths:
    runs-on: ubuntu-latest
    outputs:
      context-path-values: ${{ steps.prepare-context-paths.outputs.context-path-values }}
    steps:
      - name: Prepare context-paths values in bash
        id: prepare-context-paths
        run: |
          # Capture the input
          context_path_values="${{ inputs.context-path-values }}"

          # Split the input by comma into a Bash array
          IFS=',' read -r -a array <<< "$context_path_values"

          cleaned_array=()
          for element in "${array[@]}"; do
            cleaned_element=$(echo "$element" | sed 's/^[ \t]*//;s/[ \t]*$//')
            cleaned_array+=("$cleaned_element")
          done

          # Convert the array into compact JSON format (without pretty-printing)
          json_array=$(printf '%s\n' "${cleaned_array[@]}" | jq -R . | jq -s -c .)

          # Set the compact JSON array as output and as an environment variable
          echo "context-paths values: $json_array"
          echo "::set-output name=context-path-values::$json_array"
          echo "CONTEXT_PATH_VALUES=$json_array" >> $GITHUB_ENV

  update_database_migrations:
    needs: sanitize-context-paths
    runs-on: ${{ inputs.runs-on }}
    if: ${{ needs.sanitize-context-paths.outputs.context-path-values != '[]' }}
    strategy:
      fail-fast: true
      matrix:
        value: ${{ fromJSON(needs.sanitize-context-paths.outputs['context-path-values']) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Setup Dotnet and Install ef core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - run: dotnet tool install --global dotnet-ef

      - name: Verify EF-Core installation & update
        run: |
          export PATH=$PATH:$HOME/.dotnet/tools
          source ~/.bashrc
          dotnet ef --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Code Artifact Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain fullstackindie --domain-owner 896630178141 --query authorizationToken --output text` >> $GITHUB_ENV

      - name: Setup Aws as Nuget
        run: |
          aws codeartifact login --tool dotnet --domain fullstackindie --domain-owner 896630178141 --repository fullstackindie 
          aws codeartifact list-packages --domain fullstackindie --repository fullstackindie 

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_FIREWALL_API_TOKEN }}

      - name: Update firewall rules with Github Runner IP for Digital Ocean DB
        run: |
          export GITHUB_ACTION_IP=$(curl https://ifconfig.io/)
          doctl databases firewalls append ${{ secrets.DIGITAL_OCEAN_DATABASE_CLUSTER_ID }} --rule ip_addr:$GITHUB_ACTION_IP --verbose

      - name: Cache Nuget Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Use context-paths value
        run: |
          echo "context-paths value: ${{ matrix.value }}"

      - name: Verify EF-Core installation & update
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          # The -- token directs dotnet ef to treat everything that follows as an argument
        run: |
          dotnet ef database update --verbose --project="${{ inputs.project-name }}" --context=${{ matrix.value }} -- --environment ${{ inputs.environment }}

      - name: Remove Github Runner IP from firewall rules for Digital Ocean DB
        run: |
          export GITHUB_ACTION_IP="$(curl https://ifconfig.io/)"
          echo "$GITHUB_ACTION_IP"
          doctl databases firewalls list ${{ secrets.DIGITAL_OCEAN_DATABASE_CLUSTER_ID }} > firewall_rules.json
          export FIREWALL_UUID="$(jq -r --arg ip "$GITHUB_ACTION_IP" '.rules[] | select(.value == $ip) | .uuid' firewall_rules.json)"
          echo $FIREWALL_UUID
          doctl databases firewalls remove ${{ secrets.DIGITAL_OCEAN_DATABASE_CLUSTER_ID }} --uuid $FIREWALL_UUID --verbose